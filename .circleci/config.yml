version: 2

jobs:

  # -------------------------------------------------------------------------------
  # Generator
  # -------------------------------------------------------------------------------

  build:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/gapic-generator-kotlin/generator
    steps:
      - checkout:
          path: ~/gapic-generator-kotlin
      - run:
          name: "Checkout submodules"
          command: |
            git submodule init
            git submodule update
      - restore_cache:
          key: generator-v0-{{ checksum "build.gradle.kts" }}
      - run: 
          name: Download dependencies
          command: ./gradlew dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: generator-v0-{{ checksum "build.gradle.kts" }}
      - run: 
           name: Build and run checks
           command: ./gradlew build
      - run: 
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
      - run: 
          name: Codecov
          command: bash <(curl -s https://codecov.io/bash)
          when: always
      - persist_to_workspace:
          root: ./..
          paths:
            - generator/build/libs
            - generator/build/distributions

  dockerize:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/gapic-generator-kotlin/generator
    steps:
      - checkout:
          path: ~/gapic-generator-kotlin
      - attach_workspace:
          at: ./..
      - setup_remote_docker
      - run:
          name: Dockerize
          command: docker build -t kgen .
      - run:
          name: Generate example-client with image
          command: |
            docker create -v /proto --name protos alpine:3.4 /bin/true
            docker cp ./../example-server/src/main/proto/. protos:/proto
            docker run --volumes-from protos kgen
      - run:
          name: Save docker image
          command: docker save -o kgen.tar kgen
      - persist_to_workspace:
          root: ./..
          paths:
            - generator/kgen.tar

  # -------------------------------------------------------------------------------
  # Examples
  # -------------------------------------------------------------------------------  

  build_cloud_examples:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/gapic-generator-kotlin/example-api-cloud-clients
    steps:
      - checkout:
          path: ~/gapic-generator-kotlin
      - attach_workspace:
          at: ./..
      - restore_cache:
          key: cloud-examples-v0-{{ checksum "build.gradle.kts" }}
      - run: 
          name: Download dependencies
          command: ./gradlew dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: cloud-examples-v0-{{ checksum "build.gradle.kts" }}
      - run: 
           name: Build and run checks
           command: ./gradlew build
      - run: 
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit

  build_cloud_android_examples:
    working_directory: ~/gapic-generator-kotlin/example-api-cloud-clients-android
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout:
          path: ~/gapic-generator-kotlin
      - attach_workspace:
          at: ./..
      - restore_cache: &android-example-key
          key: cloud-examples-android-v0-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          <<: *android-example-key
          paths:
            - ~/.gradle
      - run:
          name: Create placeholder key
          command: |
            touch app/src/main/res/raw/sa.json
            touch app/src/main/res/raw/client_config.json
      - run:
          name: Run checks
          command: ./gradlew check
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - store_test_results:
          path: app/build/test-results

  # -------------------------------------------------------------------------------
  # Tests
  # -------------------------------------------------------------------------------

  test_showcase:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/gapic-generator-kotlin/showcase-test
    steps:
      - checkout:
          path: ~/gapic-generator-kotlin
      - attach_workspace:
          at: ./..
      - restore_cache:
          key: showcase-v0-{{ checksum "build.gradle.kts" }}
      - run: 
          name: Download dependencies
          command: ./gradlew dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: showcase-v0-{{ checksum "build.gradle.kts" }}
      - run:
          name: Download showcase
          command: |
            sudo sh -c "curl -sSL https://github.com/googleapis/gapic-showcase/releases/download/v0.0.5/gapic-showcase-v1alpha2-0.0.5-linux-amd64 > /usr/local/bin/showcase"
            sudo sh -c "chmod +x /usr/local/bin/showcase"
      - run:
          name: Run showcase
          command: /usr/local/bin/showcase start
          background: true
      - run:
          name: Test showcase
          command: ./gradlew test
      - run: 
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit

  test_example:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/gapic-generator-kotlin
    steps:
      - checkout:
          path: ~/gapic-generator-kotlin
      - attach_workspace:
          at: .
      - restore_cache:
          key: example-server-v0-{{ checksum "example-server/build.gradle.kts" }}-{{ checksum "example-client/build.gradle.kts" }}
      - run: 
          name: Download dependencies
          command: ./gradlew dependencies
          working_directory: ~/gapic-generator-kotlin/example-server
      - run: 
          name: Download dependencies
          command: ./gradlew dependencies
          working_directory: ~/gapic-generator-kotlin/example-client
      - save_cache:
          paths:
            - ~/example-server/.gradle
            - ~/example-client/.gradle
          key: example-server-v0-{{ checksum "example-server/build.gradle.kts" }}-{{ checksum "example-client/build.gradle.kts" }}
      - run:
          name: Run server
          command: ./gradlew run
          working_directory: ~/gapic-generator-kotlin/example-server
          background: true
      - run:
          name: Wait for the server to spin up
          shell: /bin/sh
          command: |
              wget --retry-connrefused --waitretry=1 --timeout=15 --tries=30 http://localhost:8080
              :
      - run:
          name: Run client
          command: ./gradlew run
          working_directory: ~/gapic-generator-kotlin/example-client

  # -------------------------------------------------------------------------------
  # Tests - Integration (Cloud)
  # -------------------------------------------------------------------------------

  test_cloud_examples:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/gapic-generator-kotlin/example-api-cloud-clients
    steps:
      - checkout:
          path: ~/gapic-generator-kotlin
      - attach_workspace:
          at: ./..
      - restore_cache:
          key: cloud-examples-v0-{{ checksum "build.gradle.kts" }}
      - run: 
          name: Download dependencies
          command: ./gradlew dependencies
      - run: 
          name: Run all examples
          command: |
            echo $GCLOUD_SERVICE_KEY > /tmp/_key.json
            export GOOGLE_APPLICATION_CREDENTIALS=/tmp/_key.json
            export PROJECT=$GCLOUD_PROJECT_ID
            ./gradlew run --args language
            ./gradlew run --args logging
            ./gradlew run --args speech
            ./gradlew run --args vision
            ./gradlew run --args pubsub
      - run:
          command: rm /tmp/_key.json
          when: always

  test_cloud_android_examples:
    working_directory: ~/gapic-generator-kotlin/example-api-cloud-clients-android
    docker:
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout:
          path: ~/gapic-generator-kotlin
      - attach_workspace:
          at: ./..
      - restore_cache:
          <<: *android-example-key
      - run:
          name: Build debug APK and release APK
          command: |
            echo $GCLOUD_SERVICE_KEY > app/src/main/res/raw/sa.json
            echo $GCLOUD_CLIENT_CONFIG > app/src/main/res/raw/client_config.json
            ./gradlew assembleDebug assembleDebugAndroidTest
      - run:
          name: Run all examples
          command: |
            sudo gcloud auth activate-service-account --key-file=app/src/main/res/raw/sa.json
            sudo gcloud --quiet config set project $GCLOUD_PROJECT_ID
            sudo gcloud firebase test android run --app app/build/outputs/apk/debug/app-debug.apk --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk
      - run:
          command: |
            rm app/src/main/res/raw/sa.json
            rm app/src/main/res/raw/client_config.json
          when: always          

  # -------------------------------------------------------------------------------
  # Deploy
  # -------------------------------------------------------------------------------
      
  release_gcr_snapshot:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/gapic-generator-kotlin/generator
    steps:
      - setup_remote_docker
      - run: &setup-gcloud
          name: Setup gcloud
          command: |
            echo ${GCLOUD_SERVICE_KEY} > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud config set project ${GCLOUD_PROJECT_ID}
            gcloud auth configure-docker
      - attach_workspace:
          at: ./..
      - run:
          name: Load docker image
          command: docker load -i kgen.tar
      - run:
          name: Tag snapshot
          command: docker tag kgen gcr.io/kotlin-gapic/kgen:${CIRCLE_BRANCH}-${CIRCLE_SHA1}
      - run:
          name: Push snapshot
          command: docker push gcr.io/kotlin-gapic/kgen:${CIRCLE_BRANCH}-${CIRCLE_SHA1}

  # TODO: move to docker hub
  release:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/gapic-generator-kotlin/generator
    steps:
      - setup_remote_docker
      - run: *setup-gcloud
      - attach_workspace:
          at: ./..
      - run:
          name: Load docker image
          command: docker load -i kgen.tar
      - run:
          name: Tag release
          command: |
            docker tag kgen gcr.io/kotlin-gapic/kgen:latest
            docker tag kgen gcr.io/kotlin-gapic/kgen:${CIRCLE_TAG:1}
      - run:
          name: Push release
          command: |
            docker push gcr.io/kotlin-gapic/kgen:latest
            docker push gcr.io/kotlin-gapic/kgen:${CIRCLE_TAG:1}

# -------------------------------------------------------------------------------
# CI Workflow
# -------------------------------------------------------------------------------

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - dockerize:
          requires:
            - build
      - build_cloud_examples:
          requires:
            - build
      - build_cloud_android_examples:
          requires:
            - build
      - test_showcase:
          requires:
            - build
      - test_example:
          requires:
            - build
      - test_cloud_android_examples:
          requires:
            - build
          filters: &master-filter
            branches:
              only: master
            tags:
              only: /.*/
      - test_cloud_examples:
          requires:
            - build
          filters: *master-filter
      - release_gcr_snapshot:
          requires:
            - build
            - dockerize
            - build_cloud_examples
            - build_cloud_android_examples
            - test_showcase
            - test_example
            - test_cloud_examples
            - test_cloud_android_examples
          filters: *master-filter
      - release:
          requires:
            - release_gcr_snapshot
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
