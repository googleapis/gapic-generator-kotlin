/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext.kotlin_version = '1.2.61'
    ext.grpc_version = '1.14.0'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'

mainClassName = 'example.Main'

defaultTasks 'run'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // get the KGax library via jitpack
    // (this library is in preview and not yet published to maven)
    implementation 'com.github.googleapis.gax-kotlin:kgax-grpc:4ae88c3'

    testCompile 'junit:junit:4.11'
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile 'com.nhaarman:mockito-kotlin:1.6.0'
}

sourceSets {
    // add the proto file from the server project
    main {
        proto {
            srcDir '../example-apis'
        }
    }

    // add generated unit tests to the project
    test.java.srcDirs += "${project.buildDir}/generated/source/clientTest"
}

// compile proto and generate Kotlin clients!
protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.6.1'
    }
    plugins {
        javalite {
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
        client {
            // get the KGen code generator
            // this is normally done through the package manager, i.e.:
            //   artifact = 'com.github.googleapis:gapic-generator-kotlin:master-SNAPSHOT:core@jar'
            // but these examples are used for testing so we'll use a local copy instead
            path = "${projectDir}/../runLocalGenerator.sh"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.plugins {
                javalite {}
                // generate the Kotlin API clients
                client {
                    // this option will add generated unit tests for the client to the project
                    // be sure to add the directory to your test source set(s) as shown above
                    option "test-output=${project.buildDir}/generated/source/clientTest"

                    // this option is not typical. It is used here because the cloud API
                    // definitions used in this example use a legacy configuration format.
                    // This will be removed once they are updated.
                    option "source=${projectDir}/../example-apis"

                    // this options should be added for Google APIs
                    option "auth-google-cloud"
                }
            }
        }
    }
}
